generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  passwordHash String
  todos        Todo[]

  Weekly                  Weekly[]
  WeeklyProgress          WeeklyProgress[]
  Anytime                 Anytime[]
  AnytimeTodo             AnytimeTodo[]
  AnytimeTag              AnytimeTag[]
  AnytimeTagAssignment    AnytimeTagAssignment[]
  RecurringTodo           RecurringTodo[]
  RecurringTodoCompletion RecurringTodoCompletion[]
  @@unique([email])
}

model Todo {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  text      String
  href      String   @default("")
  date      DateTime @db.Date
  completed Boolean  @default(false)
  list      String

  @@index([userId, date])
}

model RecurringTodo {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  text             String
  list             String
  startDate        DateTime
  repeats          String
  repeatEvery      Int
  weeklyDayRepeats String[]

  RecurringTodoCompletion RecurringTodoCompletion[]
  @@index([userId])
}

model RecurringTodoCompletion {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  createdAt       DateTime      @default(now())
  recurringTodoId String
  RecurringTodo   RecurringTodo @relation(fields: [recurringTodoId], references: [id], onDelete: Cascade)
  date            DateTime      @db.Date
  // not tracking 'completed' like on todos, the existance of a completion on a date means it's done

  @@unique([userId, recurringTodoId, date])
  @@index([userId, date])
}

model Weekly {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  name      String
  // the number of times this weekly needs to be done
  goal      Int
  // soft-delete for keeping old weekly progress around
  deleted   Boolean  @default(false)

  WeeklyProgress WeeklyProgress[]
  @@index([userId])
}

model WeeklyProgress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  weeklyId  String
  weekly    Weekly   @relation(fields: [weeklyId], references: [id], onDelete: Cascade)
  // the number of times this weekly has been performed
  progress  Int
  // store the goal with the number, so it can be changed independently of the weekly
  goal      Int
  // a serialized CalendarDate for Sunday of the week this corresponds to
  week      String

  @@unique([userId, weeklyId, week])
  @@index([userId, week])
}

model Anytime {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  type      String
  pinned    Boolean  @default(false)

  countdownEnd DateTime?

  count          Int     @default(0)
  showCountUp    Boolean @default(true)
  showCountDown  Boolean @default(true)
  currentDayTime BigInt
  resetsDaily    Boolean @default(false)
  countHistory   Json    @default("[]")

  notes String @default("")

  todos AnytimeTodo[]
  tags  AnytimeTagAssignment[]
  @@index([userId])
}

model AnytimeTag {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  name              String
  showOnAllAnytimes Boolean  @default(true)

  AnytimeTagAssignment AnytimeTagAssignment[]
  @@index([userId])
}

model AnytimeTagAssignment {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  anytimeId    String
  anytime      Anytime    @relation(fields: [anytimeId], references: [id], onDelete: Cascade)
  anytimeTagId String
  anytimeTag   AnytimeTag @relation(fields: [anytimeTagId], references: [id], onDelete: Cascade)

  @@unique([userId, anytimeId, anytimeTagId])
  @@index([userId])
}

model AnytimeTodo {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  text      String
  href      String   @default("")
  completed Boolean  @default(false)
  anytimeId String
  anytime   Anytime  @relation(fields: [anytimeId], references: [id], onDelete: Cascade)

  @@index([userId, anytimeId])
}
